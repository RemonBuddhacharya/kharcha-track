---
description: 
globs: 
alwaysApply: true
---
# Laravel 12 Project Rules

## Project Structure & Organization
- **Skeleton Structure**: Follow Laravel 12's updated structure. Middleware registration should be done in bootstrap/app.php, and service providers registered in bootstrap/providers.php only when necessary.
- **Directory Structure**: Use lowercase with dashes for directories (e.g., app/Http/Controllers).
- **MVC Architecture**: Strictly follow Laravel's MVC architecture pattern.
- **PSR Compliance**: Adhere to PSR-12 coding standards for clarity and consistency.
- **Code Formatting**: Use Laravel Pint for automatic code formatting.

## PHP & Laravel Core
- **PHP Version**: Use PHP 8.1+ features when appropriate (e.g., typed properties, match expressions).
- **Strict Typing**: Always include `declare(strict_types=1);` at the top of PHP files.
- **SOLID Principles**: Follow object-oriented programming with a focus on SOLID principles.
- **Descriptive Naming**: Use descriptive variable and method names that clearly indicate purpose.
- **Built-in Features**: Utilize Laravel's built-in features and helpers whenever possible.

## Controllers & Routes
- **Fat Models, Skinny Controllers**: Keep controllers minimal by moving business logic into models or service classes.
- **Console Scheduler**: Define scheduled commands in routes/console.php.
- **Route Organization**: Use Laravel's routing system for defining application endpoints, organized by domain.
- **Request Validation**: Implement proper request validation using Form Requests.

## Middleware & Security
- **Middleware Registration**: Register middleware in bootstrap/app.php.
- **Security Best Practices**: 
  - Always validate and sanitize user input
  - Use Laravel's CSRF protection for all forms
  - Implement proper authentication and authorization using Laravel's built-in features
  - Use prepared statements to prevent SQL injection

## Models & Database
- **Eloquent ORM**: Use Eloquent ORM instead of raw SQL queries when possible.
- **Database Relationships**: Implement proper database relationships using Eloquent.
- **Migrations & Seeders**: Use proper database migrations and seeders for database changes.
- **Query Optimization**: 
  - Implement proper database indexing for improved query performance
  - Minimize database queries by eager loading relationships
  - Implement pagination for large data sets

## API Development
- **Eloquent API Resources**: Prefer Eloquent API Resources for API responses to ensure clean and maintainable APIs.
- **API Versioning**: Implement API versioning for public APIs.
- **Resource Transformations**: Use proper API resource transformations.

## Event Handling
- **Event Listeners**: Auto-listen to events by type-hinting listeners correctly.
- **Event System**: Use Laravel's event and listener system for decoupled code.

## Performance Optimization
- **Caching**: Utilize Laravel's caching mechanisms for frequently accessed data.
- **Job Queues**: Implement job queues for long-running tasks.
- **Scheduling**: Use Laravel's built-in scheduling features for recurring tasks.

## Testing
- **Unit Testing**: Write unit tests for Laravel controllers and models.
- **Feature Testing**: Implement feature tests for components using Laravel's testing tools.
- **End-to-End Testing**: Use Laravel Dusk for end-to-end testing when necessary.

## Livewire Implementation
- **Component Placement**: Place Livewire Volt components in the resources/views/livewire namespace.
- **State Management**: Ensure all Livewire components are stateful and follow separation of concerns.
- **Event Dispatching**: Use dispatch() instead of emit() for browser events to align with Volt conventions.
- **Component Design**: Create modular, reusable Livewire components.
- **Lifecycle Hooks**: Use Livewire's lifecycle hooks effectively (e.g., mount, updated, etc.).
- **Real-time Validation**: Implement real-time validation using Livewire's built-in validation features.
- **Performance**: Optimize Livewire components for performance, avoiding unnecessary re-renders.
- **Backend Integration**: Integrate Livewire components with Laravel's backend features seamlessly.
- **Lazy Loading**: Implement lazy loading for Livewire components when appropriate.

## Alpine.js Usage
- **Interactivity**: Avoid inline JavaScript in Blade templates; use Alpine.js for interactivity.
- **Directives**: Use Alpine.js directives (x-data, x-bind, x-on, etc.) for declarative JavaScript functionality.
- **Component Scope**: Implement small, focused Alpine.js components for specific UI interactions.
- **Integration**: Combine Alpine.js with Livewire for enhanced interactivity when necessary.
- **Logic Placement**: Keep Alpine.js logic close to the HTML it manipulates, preferably inline.

## UI & Styling
- **MaryUI Integration**: Use Mary UI for Blade templates, pre-configured with Vite for asset compilation.
- **Material Design**: Use MaryUI components to maintain consistent Material Design styling.
- **Component Syntax**: Prefer <x-> syntax over <x-mary> for MaryUI components.
- **Tailwind CSS**: Use Tailwind CSS for styling components, ensuring responsiveness and accessibility.
- **Responsive Design**: Ensure all UI components are responsive and accessible, following ARIA standards.
- **Theming System**: Leverage MaryUI's theming system for customizations; avoid inline styles.
- **Component Composition**: Reduce duplication by composing reusable UI components.
- **Utility Classes**: Utilize Tailwind's utility classes for responsive design.
- **Consistent Styling**: Implement a consistent color scheme and typography using Tailwind's configuration.
- **CSS Optimization**: Optimize for production by purging unused CSS classes.

## Code Quality & Architecture
- **Repository Pattern**: Implement Repository pattern for data access layer when appropriate.
- **Dependency Injection**: Favor dependency injection and service containers.
- **Error Handling**: 
  - Use Laravel's exception handling and logging features
  - Create custom exceptions when necessary
  - Use try-catch blocks for expected exceptions
- **Iteration over Duplication**: Prefer iteration and modularization over code duplication.
- **Localization**: Use Laravel's localization features for multi-language support when needed.

## Dependencies & Tools
- Laravel (latest stable version)
- Livewire
- Alpine.js
- Tailwind CSS
- MaryUI component library
- Composer for dependency management
- Laravel Pint for code formatting